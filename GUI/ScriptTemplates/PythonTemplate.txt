"""
 
Replay IOCTL 0x{0:x} script to {1:s} (in {2:s})
Auto-generated by CFB

"""

import sys
from ctypes import *
from contextlib import contextmanager

try:
    import win32con
except ImportError:
    print('win32 package is required: pip install pywin32')
    sys.exit(1)

ntdll       = windll.ntdll
kernel32    = windll.kernel32
KdPrint     = lambda x:  kernel32.OutputDebugStringA(x + '\n')

GENERIC_READ = 0x80000000
GENERIC_WRITE = 0x40000000
OPEN_EXISTING = 3

def Hexdump(src, length=16):
    FILTER = ''.join([(len(repr(chr(x))) == 3) and chr(x) or '.' for x in range(256)])
    lines = []
    for c in range(0, len(src), length):
        chars = src[c:c+length]
        hex = ' '.join(['%02x' % ord(x) for x in chars])
        printable = ''.join(['%s' % ((ord(x) <= 127 and FILTER[ord(x)]) or '.') for x in chars])
        lines.append('%04x  %-*s  %s\n' % (c, length * 3, hex, printable))
    return ''.join(lines)


@contextmanager
def GetDeviceHandle(DeviceName, *args, **kwargs):
    Access = kwargs.get('dwDesiredAccess', GENERIC_READ | GENERIC_WRITE)
    handle = kernel32.CreateFileA(DeviceName, Access, 0, None, OPEN_EXISTING, 0, None)
    if handle == -1: raise IOError('Cannot get handle to %s' % DeviceName)
    try: yield handle
    finally: kernel32.CloseHandle(handle)


def DeviceIoctlControl(DeviceName, IoctlCode, _in='', _out='', *args, **kwargs):
    dwBytesReturned = c_uint32()
    InputBufferSize = kwargs.get('_inlen', len(_in))
    OutputBufferSize = kwargs.get('_outlen', len(_out))
    InputBuffer = create_string_buffer(InputBufferSize)
    OutputBuffer = create_string_buffer(OutputBufferSize)
    InputBuffer.value = _in
    OutputBuffer.value = _out
    res = -1
    with GetDeviceHandle(DeviceName) as hDriver:
        KdPrint('Sending inbuflen=%dB to %s with ioctl=%#x (outbuflen=%dB)' % (InputBufferSize, DeviceName, IoctlCode, OutputBufferSize))
        res = kernel32.DeviceIoControl(hDriver, IoctlCode, InputBuffer, InputBufferSize, OutputBuffer, OutputBufferSize, byref(dwBytesReturned), None)
        KdPrint('Sent %dB to %s with IoctlCode %#x' % (InputBufferSize, DeviceName, IoctlCode ))
        if res:
            if dwBytesReturned: 
                print(Hexdump(OutputBuffer))
        else:
            print( GetLastError(), FormatError(GetLastError()) )
    return res


def Trigger():
    DeviceName = r'''{1:s}'''
    IoctlCode = 0x{0:x}
    lpIrpDataIn = bytearray.fromhex({3:s})
    lpIrpDataOut = bytearray(b'\x00'*{4:s})
    return DeviceIoctlControl(DeviceName, IoctlCode, lpIrpDataIn, lpIrpDataOut)


if __name__ == '__main__':
    Trigger()